package com.ilze.highlight.controller;

import com.ilze.highlight.repositories.GroupsRepository;
import com.ilze.highlight.repositories.UserRepository;
import com.ilze.highlight.entity.Groups;
import com.ilze.highlight.entity.User;
import com.ilze.highlight.service.GroupsService;
import com.ilze.highlight.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;


//@CrossOrigin("http://localhost:4200")
@RestController
@RequestMapping("api/groups") // pre-path
public class GroupsController {

  @Autowired
  private GroupsService groupsService;

  @Autowired
  private UserService userService;

  @Autowired
  private final GroupsRepository groupsRepository;

  @Autowired
  private UserRepository userRepository;

  public GroupsController(GroupsRepository groupsRepository) {
    this.groupsRepository = groupsRepository;
  }


  @GetMapping("/getGroups/{id}")
  public List<Groups> getGroups(@PathVariable(required = false) Long id){
    return groupsService.getGroupDetails(id);
  }


  @PostMapping("/save-groups")
  public ResponseEntity saveGroup(@RequestBody Groups groupObj){
    groupsService.saveGroup(groupObj);
    return new ResponseEntity(HttpStatus.CREATED);
  }

  @DeleteMapping("/delete/{id}")
  public ResponseEntity removeGroup(@PathVariable Long id){
    groupsService.deleteGroup(id);
    return new ResponseEntity(HttpStatus.OK);
  }

//  @PutMapping("/{userId}/group/{groupId}")
//  public User assignGroupToUser(
//    @PathVariable Long userId,
//    @PathVariable Long groupId
//  ){
//    return userService.assignGroupToUser(userId, groupId);
//  }

//  worked VVVV

//  @PostMapping("/user/{usersId}/groups")
//  public ResponseEntity<Groups> createGroup(@PathVariable(value = "usersId") Long usersId, @RequestBody Groups groupRequest) {
//    Groups createdGroup = userRepository.findById(usersId)
//      .map(user -> {
//        groupRequest.setId(null); // ID for new entry will be generated by entity framework, prevent override from outside
////        groupRequest.getUsers().add(user); // add relation
//
//        userService.addUserToGroup(usersId, groupRequest);
//
////        groupsService.saveGroup(groupRequest);
//
//        return groupsRepository.save(groupRequest);
//      }).orElseThrow(() -> new ResourceNotFoundException("Not found user with id = " + usersId));
//    return new ResponseEntity<>(createdGroup, HttpStatus.CREATED);
//  }



  //  @PostMapping("/create-group")
//  public ResponseEntity<Groups> createGroup(@RequestBody Groups group){
//    Groups _group = groupsService.saveGroup(group);
//
//    return new ResponseEntity<>(_group, HttpStatus.CREATED);
//  }

  //  @PostMapping("/save-groups")
//  void addGroup(@RequestBody Groups groups){
////    groupsRepository.save(groups);
//    groupsService.saveGroup(groups);
//  }


  //  @GetMapping("/all-groups")
//  public List<Groups> getGroups() {
//    return (List<Groups>) groupsRepository.findAll();
//  }

}
